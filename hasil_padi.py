# -*- coding: utf-8 -*-
"""hasil padi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P02kiS86nzv1kslrWxcy6Bmm59uNG3Dc
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import joblib
from sklearn.metrics import (
    confusion_matrix,
    classification_report,
    accuracy_score,
    precision_score,
    recall_score,
    f1_score
)

st.set_page_config(page_title="Klasifikasi Padi", layout="wide")
st.title("Aplikasi Klasifikasi Padi dengan Regresi Logistik")

# Load Data
@st.cache_data
def load_data():
    df = pd.read_excel("hasil klasifikasi final.xlsx")
    df.columns = [col.strip().lower().replace(" ", "_").replace("%", "persen") for col in df.columns]
    df.dropna(inplace=True)
    return df

df = load_data()

# Visualisasi Data
st.subheader("ðŸ§¾ Data Awal")
st.dataframe(df.head(), use_container_width=True)

st.subheader("Distribusi Kelas")
fig1, ax1 = plt.subplots()
sns.countplot(x="klasifikasi", data=df, palette="Set2", ax=ax1)
st.pyplot(fig1)


# Load Model & Scaler
model = joblib.load("logreg_model.pkl")
scaler = joblib.load("scaler.pkl")

# Siapkan Data untuk Evaluasi
X = df.drop("klasifikasi", axis=1)
y = df["klasifikasi"]
X_scaled = scaler.transform(X)
y_pred = model.predict(X_scaled)

# Evaluasi Model
st.subheader("Evaluasi Model")
col1, col2 = st.columns(2)

with col1:
    st.markdown(f"""
    - **Akurasi**: {accuracy_score(y, y_pred):.2f}
    - **Presisi**: {precision_score(y, y_pred, average='weighted'):.2f}
    - **Recall**: {recall_score(y, y_pred, average='weighted'):.2f}
    - **F1 Score**: {f1_score(y, y_pred, average='weighted'):.2f}
    """)

with col2:
    cm = confusion_matrix(y, y_pred)
    fig_cm, ax_cm = plt.subplots()
    sns.heatmap(cm, annot=True, cmap="Blues", fmt='g', ax=ax_cm)
    ax_cm.set_xlabel("Predicted")
    ax_cm.set_ylabel("Actual")
    ax_cm.set_title("Confusion Matrix")
    st.pyplot(fig_cm)

# Formulir Input
st.subheader("Prediksi Klasifikasi Baru")

input_data = {}
for col in X.columns:
    input_data[col] = st.number_input(f"{col.replace('_', ' ').title()}", step=0.1)

if st.button("Prediksi"):
    input_df = pd.DataFrame([input_data])
    input_scaled = scaler.transform(input_df)
    prediction = model.predict(input_scaled)[0]
    proba = model.predict_proba(input_scaled)

    st.success(f"Prediksi Klasifikasi: **{prediction}**")
    proba_df = pd.DataFrame(proba, columns=model.classes_)
    st.write("Probabilitas Tiap Kelas:")
    st.dataframe(proba_df.T.rename(columns={0: "Probabilitas"}))